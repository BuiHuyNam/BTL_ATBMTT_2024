-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Máy chủ: 127.0.0.1
-- Thời gian đã tạo: Th2 27, 2024 lúc 11:01 AM
-- Phiên bản máy phục vụ: 10.4.28-MariaDB
-- Phiên bản PHP: 8.0.28

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Cơ sở dữ liệu: `atbmtt`
--

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `tbl_danhmuc`
--

CREATE TABLE `tbl_danhmuc` (
  `id_danhMuc` int(11) NOT NULL,
  `tenDanhMuc` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Đang đổ dữ liệu cho bảng `tbl_danhmuc`
--

INSERT INTO `tbl_danhmuc` (`id_danhMuc`, `tenDanhMuc`) VALUES
(1, 'Web'),
(3, 'App'),
(4, 'OS');

-- --------------------------------------------------------

--
-- Cấu trúc bảng cho bảng `tbl_noidung`
--

CREATE TABLE `tbl_noidung` (
  `id_noiDung` int(11) NOT NULL,
  `tenNoiDung` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `dinhNghia` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `dauHieu` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `bienPhap` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `id_danhMuc` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Đang đổ dữ liệu cho bảng `tbl_noidung`
--

INSERT INTO `tbl_noidung` (`id_noiDung`, `tenNoiDung`, `dinhNghia`, `dauHieu`, `bienPhap`, `id_danhMuc`) VALUES
(1, 'Sensitive data exposure (Rò rỉ dữ liệu nhạy cảm)', 'Lỗ hổng này thuộc về khía cạnh crypto và tài nguyên. Dữ liệu nhạy cảm phải được mã hóa mọi lúc, bao gồm cả khi gửi đi và khi lưu trữ – không được phép có ngoại lệ. Thông tin thẻ tín dụng và mật khẩu người dùng không bao giờ được gửi đi hoặc được lưu trữ không được mã hóa. Rõ ràng thuật toán mã hóa và hashing không phải là một cách bảo mật yếu. Ngoài ra, các tiêu chuẩn an ninh web đề nghị sử dụng AES (256 bit trở lên) và RSA (2048 bit trở lên).', '1.	Kiểm tra kỹ thuật mã hóa dữ liệu: Kiểm tra xem liệu dữ liệu nhạy cảm như thông tin cá nhân, mật khẩu, thông tin tài chính có được mã hóa không. Nếu dữ liệu được lưu trữ hoặc truyền đi mà không được mã hóa, đó có thể là một dấu hiệu của lỗ hổng rò rỉ dữ liệu nhạy cảm.\r\n\r\n2.	Kiểm tra các cấu hình bảo mật: Kiểm tra các cấu hình bảo mật của ứng dụng hoặc hệ thống để đảm bảo rằng chỉ có các người dùng được ủy quyền mới có thể truy cập vào dữ liệu nhạy cảm. Nếu cấu hình không đúng, có thể dẫn đến việc rò rỉ dữ liệu.\r\n\r\n3.	Xem xét quản lý phiên và xác thực: Đảm bảo rằng quản lý phiên và các quá trình xác thực được thực hiện một cách an toàn và hiệu quả. Rò rỉ dữ liệu nhạy cảm có thể xảy ra nếu có lỗ hổng trong cách quản lý phiên hoặc xác thực người dùng.\r\n\r\n4.	Kiểm tra log hệ thống: Phân tích log hệ thống để xem có bất kỳ hoạt động không bình thường nào như truy cập không được phép vào dữ liệu nhạy cảm. Có thể sử dụng các công cụ giám sát log để tự động phát hiện các hoạt động đáng ngờ.\r\n\r\n5.	Thực hiện kiểm thử bảo mật: Sử dụng các kỹ thuật kiểm thử bảo mật như kiểm thử rò rỉ thông tin (data leakage testing) để kiểm tra xem liệu dữ liệu nhạy cảm có thể bị rò rỉ không. Các kỹ thuật này có thể bao gồm kiểm tra đầu ra, kiểm tra giao diện người dùng, và kiểm tra các giao thức mạng.\r\n\r\n6.	Xem xét mã nguồn ứng dụng: Kiểm tra mã nguồn của ứng dụng để tìm kiếm các lỗ hổng bảo mật như việc lưu trữ dữ liệu nhạy cảm mà không được mã hóa hoặc việc truyền dữ liệu qua kênh không an toàn.\r\n\r\n7.	Kiểm tra bảo mật mạng: Kiểm tra các kết nối mạng để đảm bảo rằng dữ liệu nhạy cảm không được truyền đi qua các kênh không an toàn như kết nối không mã hóa hoặc kết nối không đáng tin cậy.\r\n', '1.	Mã hóa dữ liệu: Mã hóa dữ liệu nhạy cảm khi lưu trữ và truyền đi. Sử dụng mã hóa mạnh như SSL/TLS để bảo vệ dữ liệu khi truyền đi trên mạng, và mã hóa dữ liệu khi lưu trữ trên cơ sở dữ liệu hoặc hệ thống tệp tin.\r\n\r\n2.	Xác thực mạnh mẽ: Sử dụng các phương pháp xác thực mạnh mẽ để đảm bảo chỉ có người dùng được ủy quyền mới có thể truy cập vào dữ liệu nhạy cảm. Sử dụng cơ chế xác thực hai yếu tố hoặc xác thực đa bước để tăng cường bảo mật.\r\n\r\n3.	Quản lý phiên an toàn: Đảm bảo rằng quản lý phiên được thực hiện một cách an toàn và hiệu quả. Sử dụng các phương pháp như token phiên và giới hạn thời gian phiên để ngăn chặn việc truy cập không cần thiết vào dữ liệu.\r\n\r\n4.	Chặn truy cập không cần thiết: Đảm bảo rằng dữ liệu nhạy cảm chỉ được truy cập bởi người dùng và quy trình cần thiết. Áp dụng các cơ chế kiểm soát truy cập để ngăn chặn truy cập không cần thiết từ người dùng không ủy quyền hoặc từ bên ngoài.\r\n\r\n5.	Kiểm tra cấu hình bảo mật: Kiểm tra và đảm bảo rằng cấu hình bảo mật của ứng dụng và hệ thống đang hoạt động đúng cách. Tắt các tính năng không cần thiết, thiết lập quyền truy cập đúng cho người dùng và quy trình, và thực hiện các biện pháp bảo mật khác như CSP (Content Security Policy).\r\n\r\n6.	Giảm thiểu dữ liệu nhạy cảm: Tránh lưu trữ dữ liệu nhạy cảm mà không cần thiết. Chỉ lưu trữ dữ liệu nhạy cảm khi thực sự cần thiết và xóa bỏ dữ liệu cũ khi không cần thiết nữa.\r\n\r\n7.	Kiểm tra bảo mật định kỳ: Thực hiện kiểm tra bảo mật định kỳ để xác định và khắc phục các lỗ hổng bảo mật liên quan đến rò rỉ dữ liệu nhạy cảm. Sử dụng các công cụ kiểm thử bảo mật để kiểm tra ứng dụng và hệ thống của bạn từ các góc độ khác nhau.\r\n\r\n8.	Đào tạo nhân viên về bảo mật: Đào tạo nhân viên của bạn về các nguy cơ rò rỉ dữ liệu nhạy cảm và cách ngăn chặn chúng. Đảm bảo rằng nhân viên có hiểu biết về các quy tắc bảo mật và thực hành an toàn khi làm việc với dữ liệu nhạy cảm.\r\n\r\n', 1),
(2, 'Buffer Overflow', '- Mô tả: Trước khi tìm hiểu Buffer Overflow là gì, ta cần biết được khái niệm về Buffer. Buffer (bộ đệm dữ liệu) là vùng lưu trữ dữ liệu tạm thời trong khi chờ để được chuyển đến vị trí khác. Buffer Overflow (hay Buffer Overrun) sẽ xảy ra khi khối lượng dữ liệu vượt quá khả năng lưu trữ của buffer. Do đó, khi chương trình cố gắng ghi dữ liệu vào trong buffer, nó sẽ ghi đè lên các bộ nhớ liền kề khác. Các hacker khai thác Buffer Overflow attack bằng cách ghi đè bộ nhớ của các ứng dụng. Việc này sẽ làm thay đổi execution path của chương trình, trigger một response làm ảnh hưởng xấu đến các file trên hệ thống. Hoặc thậm chí là làm lộ thông tin cá nhân của người dùng.', 'Dấu hiệu nhận biết về lỗ hỏng Buffer Overflow trong một ứng dụng có thể bao gồm:\r\n\r\n-Lỗi bị treo (crash): Ứng dụng bị đóng đột ngột hoặc gặp lỗi khi xử lý dữ liệu đầu vào không hợp lệ.\r\n\r\n-Ghi đè bộ nhớ: Khi một Buffer Overflow xảy ra, dữ liệu có thể bị ghi đè lên các vùng nhớ quan trọng khác trong ứng dụng, gây ra hiện tượng không mong muốn như lỗi hoặc thay đổi dữ liệu.\r\n\r\n-Lỗi thực thi mã (code execution): Một Buffer Overflow thành công có thể dẫn đến việc thực thi mã độc hại do tin tặc chèn vào trong vùng nhớ bị tràn. Kết quả là tin tặc có thể kiểm soát ứng dụng và thực hiện các hành động không mong muốn.\r\n\r\n-Lỗi bảo mật: Buffer Overflow thường dẫn đến việc vượt qua các kiểm tra bảo mật như kiểm tra độ dài đầu vào hoặc kiểm tra giới hạn dữ liệu, cho phép tin tặc thực hiện các cuộc tấn công khác nhau như thực hiện mã độc, thực hiện quyền hạn không được ủy quyền, hoặc truy cập vào thông tin nhạy cảm.\r\n\r\n-Chỉ số stack (stack pointer) bất thường: Trong một Buffer Overflow, chỉ số stack có thể bị thay đổi một cách không đúng đắn, dẫn đến việc thực hiện các lệnh không mong muốn hoặc gây ra lỗi thực thi.', 'Các developer có thể ngăn chặn lỗ hổng Buffer Overflow thông qua các biện pháp bảo mật với code. Hoặc đơn giản là sử dụng những ngôn ngữ có tích hợp khả năng bảo vệ.\r\nBên cạnh đó, các hệ điều hành hiện đại đều có thêm khả năng bảo vệ runtime. Trong đó, ba biện pháp bảo vệ phổ biến nhất là:\r\n+ Address Space Layout Randomization (ASLR) – di chuyển ngẫu nhiên xung quanh các không gian địa chỉ của vùng dữ liệu. Thông thường, các cuộc tấn công Buffer Overflow cần biết được vị trí của executable code, và việc ngẫu nhiên các không gian địa chỉ sẽ hoàn toàn vô hiệu hóa cách thức tấn công này.\r\n+ Bảo vệ việc thực thi dữ liệu – Falg một số vùng bộ nhớ là non-executable (không thể thực thi) hoặc executable (có thể thực thi) để ngăn chặn các cuộc tấn công chạy mã ở trong vùng non-executable.\r\n+ Structured exception handler overwrite protection (SEHOP) – giúp ngăn chặn các code độc hại tấn công SEH (Ngoại lệ có cấu trúc) – một hệ thống được tích hợp sẵn để quản lý các ngoại lệ (exception) của phần cứng và phần mềm. Từ đó, ngăn chặn các hacker lợi dụng kỹ thuật khai thác ghi đè SEH. Ở cấp độ chức năng, việc ghi đè SEH có thể đạt được bằng cách sử dụng một stack-based Buffer Overflow để ghi đè một bản ghi đăng ký ngoại lệ, được lưu trữ trong stack của thread.\r\n', 3),
(3, 'Network protocol', '- Mô tả: Lỗ hổng giao thức mạng là các điểm yếu trong quá trình truyền thông và trao đổi dữ liệu giữa các thiết bị trong mạng. Các lỗ hổng này có thể làm tăng nguy cơ bị tấn công và đánh cắp thông tin quan trọng.', '- Một số lỗ hổng phổ biến trong các giao thức mạng:\r\n+ Lỗ hổng DNS Spoofing: Tấn công DNS Spoofing thường sử dụng kỹ thuật giả mạo phản hồi DNS để chuyển hướng người dùng đến các trang web giả mạo hoặc độc hại.\r\n+ Lỗ hổng TCP/IP: Các lỗ hổng trong giao thức TCP/IP có thể bao gồm các tấn công như TCP/IP hijacking, tấn công mạng Man-in-the-Middle (MITM) và tấn công TCP sequence prediction.\r\n+Lỗ hổng trong SSL/TLS: Các lỗ hổng SSL/TLS có thể làm cho thông tin truyền tải giữa máy khách và máy chủ trở nên không an toàn, dẫn đến rủi ro bị đánh cắp thông tin cá nhân.\r\n+ Lỗ hổng trong DHCP (Dynamic Host Configuration Protocol): DHCP làm cho việc cấu hình tự động địa chỉ IP trở nên dễ dàng, nhưng cũng có thể trở thành một lỗ hổng nếu không được bảo vệ chặt chẽ.\r\n', '+Cập Nhật Hệ Thống: Luôn duy trì hệ thống và các ứng dụng được cài đặt lên phiên bản mới nhất để bảo vệ khỏi các lỗ hổng bảo mật đã được vá.\r\n+ Sử Dụng Firewall: Cấu hình và sử dụng tường lửa (firewall) để kiểm soát lưu lượng mạng, chặn các kết nối không mong muốn và ngăn chặn các loại tấn công mạng.\r\n+Mã Hóa Dữ Liệu: Sử dụng các giao thức mã hóa mạnh mẽ như SSL/TLS để bảo vệ dữ liệu truyền qua mạng khỏi bị đánh cắp.\r\n+ Giới Hạn Quyền Truy Cập: Áp dụng chính sách giới hạn quyền truy cập để đảm bảo rằng chỉ có những người cần thiết mới có thể truy cập và thực hiện các thay đổi quan trọng.\r\n', 4),
(4, 'SQL Injection (SQLi)', 'SQL Injection là một kỹ thuật tấn công mà kẻ tấn công cố gắng chèn các đoạn mã SQL độc hại vào các truy vấn SQL của ứng dụng web. Khi thực thi, các đoạn mã này có thể thay đổi cấu trúc của câu lệnh SQL, dẫn đến việc truy cập, thay đổi hoặc xóa dữ liệu từ cơ sở dữ liệu. Các lỗ hổng SQLi thường xuất hiện khi ứng dụng không kiểm soát đầu vào người dùng đúng cách.', '-	Ký tự đặc biệt trong đầu vào: Sự xuất hiện của các ký tự như \', ;, --, UNION, có thể là dấu hiệu của SQL Injection.\r\n-	Sự thay đổi trong dữ liệu: Các biến đổi bất thường trong dữ liệu cơ sở dữ liệu, chẳng hạn như sự xuất hiện của thông tin không mong muốn hoặc thay đổi không rõ nguồn gốc.\r\n-	Lỗi SQL xuất hiện: Nếu ứng dụng không xử lý lỗi SQL một cách an toàn, lỗi có thể xuất hiện trực tiếp trên giao diện người dùng.\r\n', '\r\n-	Sử dụng Prepared Statements hoặc Parametrized Queries: Thay vì tạo câu lệnh SQL bằng cách ghép chuỗi, sử dụng cơ chế Prepared Statements để truyền tham số an toàn vào câu lệnh SQL.\r\n-	Kiểm tra và xử lý đầu vào người dùng: Loại bỏ hoặc mã hóa các ký tự đặc biệt trong dữ liệu đầu vào để ngăn chặn việc chèn mã độc hại.\r\n-	Nguyên tắc của Least Privilege: Đảm bảo rằng tài khoản cơ sở dữ liệu mà ứng dụng sử dụng có đặc quyền tối thiểu cần thiết để thực hiện các nhiệm vụ, giảm thiểu ảnh hưởng của một cuộc tấn công SQLi.\r\n', 1),
(5, 'Cross-Site Scripting (XSS)', 'Cross-Site Scripting (XSS) là một kỹ thuật tấn công mà kẻ tấn công chèn mã JavaScript độc hại vào trang web hoặc ứng dụng web, thường thông qua các trường nhập liệu của người dùng. Khi người dùng khác truy cập trang web, mã JavaScript này được thực thi trong trình duyệt của họ.', '-	Chèn mã HTML/JavaScript: Sự xuất hiện của các đoạn mã HTML hoặc JavaScript không an toàn trong dữ liệu đầu vào người dùng.\r\n-	Sự thay đổi trong giao diện người dùng: Các biến đổi bất thường trong nội dung của trang web, thường là sự xuất hiện của thông điệp không mong muốn hoặc các hành động không thể giải thích được.\r\n-	Kiểm tra trình duyệt: Sử dụng các công cụ kiểm thử bảo mật để phát hiện các lỗ hổng XSS trong mã nguồn.\r\n', '-	Escape/Encode dữ liệu người dùng: Trước khi hiển thị dữ liệu người dùng trên trang web, hãy sử dụng các hàm escape/encode HTML để ngăn chặn việc thực thi mã JavaScript.\r\n-	HTTP Only Cookies: Sử dụng HTTP Only flag cho cookies để ngăn chặn truy cập từ mã JavaScript và giảm nguy cơ chiếm đoạt phiên làm việc.\r\n-	Content Security Policy (CSP): Thiết lập và thực thi CSP để hạn chế nguồn của các tài nguyên có thể được tải và thực thi trên trang web.\r\n-	Kiểm tra và xử lý đầu vào người dùng: Kiểm tra và lọc dữ liệu đầu vào để ngăn chặn các ký tự đặc biệt và mã độc hại.\r\n', 1),
(6, 'Missing function level access control (lỗi phân quyền)', 'Đây chỉ là sai sót trong vấn đề phân quyền. Nó có nghĩa là khi một hàm được gọi trên máy chủ, quá trình phân quyền không chính xác. Các nhà phát triển dựa vào thực tế là phía máy chủ tạo ra giao diện người dùng và họ nghĩ rằng khách hàng không thể truy cập các chức năng nếu không được cung cấp bởi máy chủ.\r\nTuy nhiên, kẻ tấn công luôn có thể yêu cầu các chức năng “ẩn” và sẽ không bị cản trở bởi việc giao diện người dùng không cho phép thực hiện các chức năng này. Hãy tưởng tượng trong giao diện người dùng chỉ có bảng điều khiển/admin và nút nếu người dùng thực sự là quản trị viên. Không có gì ngăn cản kẻ tấn công phát hiện ra những tính năng này và lạm dụng nó nếu không phân quyền.\r\n', '1.	Thực hiện kiểm thử tính năng không phân quyền: Kiểm tra các tính năng của ứng dụng mà không đăng nhập hoặc sử dụng một tài khoản có quyền truy cập thấp. Nếu bạn có thể truy cập vào các tính năng quản trị hoặc tính năng cần đặc quyền mà không cần phải xác thực, có thể ứng dụng của bạn đang mắc lỗi phân quyền.\r\n\r\n2.	Sử dụng các công cụ kiểm thử tự động: Có các công cụ kiểm thử tự động có thể tự động phát hiện lỗ hổng \"Missing Function Level Access Control\" bằng cách kiểm tra các yêu cầu và phản hồi của ứng dụng. Các công cụ như OWASP ZAP hoặc Burp Suite có thể hỗ trợ bạn trong việc phát hiện lỗ hổng này.\r\n\r\n3.	Phân tích log hoạt động của người dùng: Xem xét các log hoạt động của người dùng để tìm kiếm các hoạt động không bình thường hoặc có dấu hiệu của việc truy cập vào các tính năng hoặc chức năng không được phép.\r\n\r\n4.	Kiểm tra mã nguồn ứng dụng: Kiểm tra mã nguồn của ứng dụng để tìm kiếm bất kỳ điều kiện logic nào có thể cho phép truy cập không đáng phải được phép vào các tính năng hoặc chức năng.\r\n\r\n5.	Kiểm tra các yêu cầu HTTP: Kiểm tra các yêu cầu HTTP để xem xét liệu các thông tin đi kèm có đủ để xác định quyền truy cập của người dùng không. Nếu các yêu cầu không chứa thông tin về quyền truy cập, có thể có lỗi phân quyền.\r\n\r\n6.	Kiểm tra phản hồi HTTP: Kiểm tra các phản hồi HTTP từ ứng dụng để xem xét liệu chúng có chứa thông tin nhạy cảm hoặc các chức năng không được phép không. Nếu người dùng có thể thấy thông tin hoặc truy cập vào các chức năng không đáng phải được phép, có thể ứng dụng đang mắc lỗi phân quyền.\r\n', '1.     Xác thực mạnh mẽ: Thực hiện xác thực mạnh mẽ để đảm bảo rằng người dùng chỉ có thể truy cập vào các tính năng hoặc chức năng mà họ được phép. Sử dụng các biện pháp như xác thực hai yếu tố hoặc xác thực đa bước để tăng cường bảo mật.\r\n\r\n2.	Quản lý phiên an toàn: Đảm bảo rằng quản lý phiên được thực hiện một cách an toàn và hiệu quả. Sử dụng các token phiên và giới hạn thời gian phiên để ngăn chặn việc truy cập không cần thiết vào các tính năng hoặc chức năng.\r\n\r\n3.	Kiểm tra quyền truy cập: Thực hiện kiểm tra quyền truy cập trước khi cho phép người dùng truy cập vào các tính năng hoặc chức năng. Đảm bảo rằng các quyền được xác định chính xác và chỉ cho phép truy cập nếu người dùng có quyền tương ứng.\r\n\r\n4.	Kiểm tra cấu hình bảo mật: Kiểm tra và đảm bảo rằng cấu hình bảo mật của ứng dụng và hệ thống đang hoạt động đúng cách. Tắt các tính năng không cần thiết, thiết lập quyền truy cập đúng cho người dùng và quy trình, và thực hiện các biện pháp bảo mật khác như CSP (Content Security Policy).\r\n\r\n5.	Kiểm tra mã nguồn ứng dụng: Kiểm tra mã nguồn của ứng dụng để tìm kiếm bất kỳ điều kiện logic nào có thể cho phép truy cập không đáng phải được phép vào các tính năng hoặc chức năng. Sửa lỗi logic và thực hiện kiểm tra tự động để đảm bảo tính liên tục của quá trình kiểm tra.\r\n\r\n6.	Kiểm tra thủ công và tự động: Thực hiện kiểm tra thủ công và tự động để đảm bảo tính đầy đủ và hiệu quả của việc kiểm tra quyền truy cập. Sử dụng các công cụ kiểm thử bảo mật để tự động phát hiện lỗ hổng và thực hiện kiểm tra thủ công để kiểm tra các tình huống phức tạp hơn.\r\n\r\n7.	Đào tạo nhân viên về bảo mật: Đào tạo nhân viên của bạn về các nguy cơ của lỗ hổng \"Missing Function Level Access Control\" và cách ngăn chặn chúng. Đảm bảo rằng nhân viên hiểu biết về các quy tắc bảo mật và thực hành an toàn khi phát triển và triển khai ứng dụng.\r\n\r\n', 1),
(7, 'Lỗ hổng XSRF/CSRF (Cross-Site Request Forgery)', 'Lỗ hổng này cho phép kẻ tấn công thực hiện các hành động không được ủy quyền trên ứng dụng bằng cách lừa đảo người dùng thực hiện các thao tác không mong muốn.', '1.	Kiểm tra các yêu cầu không mong muốn: Kiểm tra các yêu cầu HTTP được gửi từ trình duyệt của người dùng mà họ không thực sự thực hiện hoặc không có ý định thực hiện. Điều này có thể bao gồm việc thực hiện các hành động như thay đổi mật khẩu, thực hiện các giao dịch tài chính, hoặc thay đổi cài đặt của tài khoản người dùng mà không cần xác nhận từ người dùng.\r\n\r\n2.	Kiểm tra bất thường trong lưu lượng mạng: Theo dõi và phân tích lưu lượng mạng để phát hiện các hoạt động không thường xuyên hoặc không mong muốn, như việc gửi các yêu cầu không xác định hoặc không được kiểm soát từ các nguồn không đáng tin cậy.\r\n\r\n3.	Kiểm tra các yêu cầu không chứa token CSRF: Nếu ứng dụng của bạn sử dụng cơ chế bảo vệ bằng token CSRF, bạn có thể kiểm tra các yêu cầu HTTP để xem liệu chúng có chứa token CSRF không. Nếu một yêu cầu không chứa token CSRF hoặc token không hợp lệ, đó có thể là dấu hiệu của lỗ hổng CSRF.\r\n\r\n4.	Kiểm tra header Referer: Một cách phổ biến để ngăn chặn CSRF là kiểm tra header Referer của yêu cầu HTTP. Trong một số trường hợp, một yêu cầu được gửi từ một trang web khác nên không có header Referer hoặc header Referer không chính xác.\r\n\r\n5.	Sử dụng công cụ kiểm thử bảo mật: Có các công cụ kiểm thử bảo mật có thể tự động phát hiện lỗ hổng CSRF trong ứng dụng của bạn bằng cách gửi các yêu cầu giả mạo và kiểm tra cách ứng dụng xử lý chúng.\r\n\r\n6.	Kiểm tra mã nguồn ứng dụng: Kiểm tra mã nguồn của ứng dụng để xác định xem có bất kỳ điểm nào mà các yêu cầu HTTP có thể được chấp nhận mà không cần xác thực hoặc chứa token CSRF.\r\n\r\n', '1.	Sử dụng CSRF Token: Cung cấp một CSRF token cho mỗi yêu cầu từ phía người dùng và yêu cầu token này được bao gồm trong mỗi yêu cầu đến ứng dụng của bạn. Khi nhận được yêu cầu, ứng dụng sẽ kiểm tra xem token này có hợp lệ không, nếu không, yêu cầu sẽ bị từ chối.\r\n\r\n2.	Sử dụng SameSite Cookie Attribute: Thiết lập thuộc tính SameSite cho các cookie, có thể giúp ngăn chặn CSRF bằng cách chỉ cho phép các yêu cầu từ cùng một trang web gốc (same-site requests) sử dụng cookie.\r\n\r\n3.	Kiểm tra Referer Header: Kiểm tra header Referer trong các yêu cầu đến ứng dụng của bạn để đảm bảo rằng yêu cầu được gửi từ cùng một trang web gốc.\r\n\r\n4.	Xác thực Origin: Xác thực nguồn (Origin) của yêu cầu, đảm bảo rằng yêu cầu được gửi từ một nguồn đáng tin cậy.\r\n\r\n5.	Sử dụng CSRF Double Submit Cookie: Trong phương pháp này, một cookie chứa một mã CSRF token được tạo mỗi khi một người dùng đăng nhập và một trường ẩn trong mỗi biểu mẫu yêu cầu cũng chứa giá trị token tương tự. Khi biểu mẫu được gửi đi, ứng dụng sẽ so sánh giá trị của cookie và giá trị trong trường ẩn để xác định tính hợp lệ của yêu cầu.\r\n\r\n6.	Sử dụng Captcha: Sử dụng Captcha để xác thực người dùng, đặc biệt đối với các hoạt động nhạy cảm như thay đổi mật khẩu hoặc thực hiện các giao dịch tài chính.\r\n\r\n7.	Thực hiện bảo mật đối với phương thức HTTP: Sử dụng phương thức POST thay vì GET để thực hiện các hoạt động có thể gây ảnh hưởng lớn.\r\n\r\n8.	Cập nhật trình duyệt và framework: Luôn cập nhật trình duyệt web và các framework, thư viện được sử dụng trong ứng dụng của bạn để đảm bảo rằng họ đã áp dụng các biện pháp bảo mật mới nhất chống lại CSRF.\r\n', 3),
(8, 'Lỗ hổng Kernel', 'Đây là lỗ hổng xảy ra trong kernel của hệ điều hành, là phần trung tâm của hệ thống điều hành quản lý tài nguyên và tương tác với phần cứng. Một lỗ hổng kernel có thể cho phép kẻ tấn công thực hiện các hành động không được phép hoặc thậm chí kiểm soát toàn bộ hệ thống.', '1.	Thông báo lỗi hệ thống (System Error Messages): Kernel thường ghi lại các thông báo lỗi trong các tập tin như /var/log/messages, /var/log/syslog, hoặc /var/log/kern.log trên hệ thống Linux. Các thông báo lỗi này có thể cho thấy các vấn đề như lỗi bộ nhớ, lỗi kernel panic, hoặc các lỗi hệ thống khác.\r\n\r\n2.	Sự không ổn định hoặc tự động khởi động lại (Instability or Automatic Reboots): Nếu hệ thống thường xuyên gặp sự cố không lường trước hoặc tự động khởi động lại mà không có lý do rõ ràng, có thể đó là dấu hiệu của một lỗ hổng kernel.\r\n\r\n3.	Hiệu suất kém (Poor Performance): Một lỗ hổng kernel có thể dẫn đến hiệu suất hệ thống kém đi hoặc tăng cường sự chậm trễ trong các hoạt động hệ thống cơ bản.\r\n\r\n4.	Sự khai thác bất thường (Unusual Exploitation): Sự xuất hiện của các kỹ thuật tấn công mới hoặc các cuộc tấn công bất thường có thể là dấu hiệu của việc khai thác lỗ hổng kernel.\r\n\r\n5.	Phát hiện thông qua công cụ giám sát (Detection via Monitoring Tools): Sử dụng các công cụ giám sát hệ thống như Nagios, Zabbix, hoặc Prometheus để theo dõi các chỉ số hệ thống như tải CPU, tình trạng bộ nhớ, hoạt động mạng, và các chỉ số khác có thể giúp phát hiện các vấn đề liên quan đến kernel.\r\n\r\n6.	Phân tích log và hành vi không bình thường (Analysis of Logs and Abnormal Behavior): Kiểm tra các log hệ thống và phân tích hành vi không bình thường của hệ thống, chẳng hạn như các hoạt động không được phép hoặc không mong muốn, có thể giúp phát hiện các dấu hiệu của lỗ hổng kernel.\r\n\r\n7.	Thực hiện kiểm tra bảo mật (Security Audits): Sử dụng các công cụ kiểm tra bảo mật như Lynis, OpenVAS, hoặc Nessus để thực hiện kiểm tra bảo mật hệ thống, đóng vai trò quan trọng trong việc phát hiện các lỗ hổng kernel.\r\n\r\n', '1.	Cập nhật hệ thống đến phiên bản mới nhất: Cung cấp bản vá bảo mật cho kernel là một phần quan trọng của việc duy trì bảo mật hệ thống. Cập nhật hệ thống đến phiên bản mới nhất giúp giảm thiểu nguy cơ từ các lỗ hổng đã được phát hiện.\r\n\r\n2.	Kiểm tra và giảm thiểu số lượng module kernel không cần thiết: Module kernel không cần thiết có thể tạo ra các điểm yếu tiềm ẩn trong hệ thống. Kiểm tra và tắt các module không cần thiết để giảm thiểu bề dày và tiềm năng của hệ thống.\r\n\r\n3.	Thực hiện cấu hình an toàn cho kernel: Đảm bảo rằng kernel được cấu hình với các tùy chọn an toàn nhất cho môi trường cụ thể của bạn. Điều này bao gồm việc tắt các tính năng không cần thiết, thiết lập các giới hạn bảo mật và quản lý các cơ chế bảo mật như SELinux hoặc AppArmor.\r\n\r\n4.	Sử dụng giải pháp bảo mật thứ cấp: Sử dụng các giải pháp bảo mật thứ cấp như intrusion detection systems (IDS) hoặc intrusion prevention systems (IPS) để giám sát và phòng ngừa các cuộc tấn công vào kernel.\r\n\r\n5.	Giám sát và kiểm tra lỗ hổng định kỳ: Thực hiện kiểm tra bảo mật định kỳ và theo dõi các thông báo bảo mật mới từ nhà cung cấp kernel để đảm bảo rằng hệ thống của bạn luôn được bảo vệ khỏi các lỗ hổng mới phát hiện.\r\n\r\n6.	Thực hiện các biện pháp bảo mật mạng: Sử dụng tường lửa và các giải pháp bảo mật mạng để giảm thiểu các nguy cơ từ các cuộc tấn công từ xa vào hệ thống.\r\n\r\n7.	Thực hiện kiểm tra bảo mật chặt chẽ: Thực hiện kiểm tra bảo mật định kỳ và audit log để phát hiện sớm các vấn đề bảo mật trong hệ thống kernel.\r\n\r\n8.	Đào tạo và nhận thức về bảo mật: Đảm bảo rằng nhân viên của bạn được đào tạo về các biện pháp bảo mật cơ bản và nhận thức về các nguy cơ tiềm ẩn từ các lỗ hổng kernel.\r\n\r\n', 4),
(9, 'Security misconfiguration	', 'Security misconfiguration là một lỗi phổ biến trong việc triển khai ứng dụng web hoặc hệ thống thông tin, xuất phát từ việc cấu hình hệ thống mạng, máy chủ, ứng dụng hoặc framework không đúng cách, để lại các lỗ hổng bảo mật có thể ', '-	Quét bảo mật tự động: Sử dụng công cụ quét bảo mật tự động như OWASP ZAP, Nessus, hoặc OpenVAS để kiểm tra các cấu hình không an toàn trong hệ thống.\r\n\r\n-	Kiểm tra hệ thống cấu hình: Kiểm tra các tập tin cấu hình của ứng dụng, máy chủ và hệ thống mạng để đảm bảo rằng chúng không bị để mặc định hoặc cấu hình không an toàn.\r\n\r\n-	Quét mã nguồn mở: Kiểm tra mã nguồn mở của ứng dụng hoặc framework để tìm kiếm các cấu hình không an toàn, như các giá trị cứng cố định, không được mã hóa, hoặc không được bảo vệ đúng cách.\r\n', '-	Thực hiện kiểm tra cấu hình định kỳ: Kiểm tra và cập nhật các cấu hình hệ thống, máy chủ và ứng dụng định kỳ để đảm bảo rằng chúng không bị để mặc định hoặc cấu hình không an toàn.\r\n\r\n-	Sử dụng các hướng dẫn bảo mật: Sử dụng các hướng dẫn bảo mật được cung cấp bởi các tổ chức như OWASP để áp dụng các cấu hình an toàn cho hệ thống của bạn.\r\n\r\n-	Giảm thiểu bề dày cuộc tấn công: Loại bỏ hoặc giảm thiểu sự tồn tại của các thành phần không cần thiết trong hệ thống, đồng thời áp dụng các biện pháp bảo mật như tường lửa và bộ lọc gói tin để giảm thiểu khả năng tấn công từ bên ngoài.\r\n\r\n-	Kiểm tra mã nguồn: Thực hiện kiểm tra mã nguồn định kỳ để phát hiện và loại bỏ các cấu hình không an toàn từ mã nguồn mở.\r\n\r\n-	Hạn chế quyền truy cập: Áp dụng nguyên tắc nguyên lý lưỡng năng và hạn chế quyền truy cập của người dùng và các thành phần hệ thống đến những gì cần thiết cho nhiệm vụ của họ.\r\n', 1),
(10, 'Cross-Site Request Forgery', 'Cross-Site Request Forgery (CSRF) là một loại tấn công mạng mà kẻ tấn công tạo ra và gửi các yêu cầu từ một nguồn website mà nạn nhân đã được xác thực để thực hiện các hành động không mong muốn trên một website khác mà nạn nhân đang được truy cập, thường là để lợi dụng các phiên đăng nhập hiện tại của nạn nhân.\r\n\r\n', '-	Kiểm tra lịch sử hoạt động của người dùng: Kiểm tra lịch sử hoạt động của người dùng để xác định xem có bất kỳ hành động nào không mong muốn hoặc không được phê duyệt đã được thực hiện.\r\n\r\n-	Phân tích yêu cầu HTTP: Phân tích các yêu cầu HTTP để xem xét xem có bất kỳ hoạt động nào không bình thường nào có thể gây ra CSRF.\r\n\r\n-	Sử dụng công cụ phát hiện tấn công: Sử dụng các công cụ phát hiện tấn công để theo dõi và phát hiện các yêu cầu không mong muốn hoặc không được phê duyệt.\r\n', '-	Sử dụng token CSRF (CSRF token): Đảm bảo rằng mỗi yêu cầu của người dùng đi kèm với một token CSRF không dự đoán được và độc lập để xác thực nguồn gốc của yêu cầu. Khi nhận được yêu cầu, máy chủ kiểm tra xem token này có khớp với token đã tạo cho phiên đăng nhập hiện tại hay không.\r\n\r\n-	Thực hiện SameSite cookie attribute: Đặt thuộc tính SameSite cho các cookie trong cấu hình của máy chủ web để giảm thiểu nguy cơ của CSRF. SameSite attribute có thể được đặt thành \'Strict\' hoặc \'Lax\' để hạn chế các yêu cầu CSRF từ các trang web khác.\r\n\r\n-	Sử dụng Captcha: Sử dụng Captcha để xác minh xem người dùng có phải là con người hay không, giảm nguy cơ của tấn công CSRF từ các bot hoặc các kịch bản tự động.\r\n\r\n-	Giảm thiểu sự tin tưởng đối với cookie: Tránh sử dụng các thông tin nhạy cảm hoặc quyền truy cập trong cookie và luôn xác thực lại người dùng trước khi thực hiện bất kỳ hành động quan trọng nào.\r\n\r\n\r\n', 1),
(11, 'Unvalidated Redirects and Forwards', 'Unvalidated Redirects and Forwards là một loại lỗ hổng bảo mật trong các ứng dụng web, khi các trang web chấp nhận thông tin đầu vào từ người dùng và sử dụng thông tin này để chuyển hướng người dùng đến một địa chỉ URL khác mà không kiểm tra xác thực đối với URL đó. Điều này có thể được lợi dụng bởi kẻ tấn công để điều hướng người dùng đến các trang web độc hại hoặc phishing.', '-	Kiểm tra URL chuyển hướng: Kiểm tra các yêu cầu chuyển hướng từ các trang web và xác minh xem chúng có kiểm tra hoặc xác thực URL đích không.\r\n\r\n-	Phân tích mã nguồn: Phân tích mã nguồn của trang web để tìm kiếm các đoạn mã hoặc chức năng liên quan đến chuyển hướng và xác minh liệu chúng có thực hiện xác thực URL không.\r\n\r\n-	Sử dụng công cụ kiểm thử bảo mật: Sử dụng các công cụ kiểm thử bảo mật tự động để kiểm tra các lỗ hổng bảo mật trong ứng dụng, bao gồm Unvalidated Redirects and Forwards.\r\n', '-	Xác thực và kiểm tra URL: Luôn kiểm tra và xác thực URL đích trước khi thực hiện chuyển hướng hoặc chuyển tiếp. Đảm bảo rằng URL chỉ được phép chuyển hướng đến các địa chỉ URL đã được xác thực và được quản lý.\r\n\r\n-	Sử dụng danh sách trắng: Sử dụng danh sách trắng (whitelist) để chỉ cho phép chuyển hướng đến các địa chỉ URL được xác thực và được cho phép trước.\r\n\r\n-	Thông báo cho người dùng: Thông báo cho người dùng về việc họ sẽ được chuyển hướng và cung cấp thông tin chi tiết về địa chỉ URL đích, giúp họ nhận ra các chuyển hướng không mong muốn.\r\n\r\n-	Giảm thiểu việc sử dụng chuyển hướng và chuyển tiếp: Tránh sử dụng chuyển hướng và chuyển tiếp nếu không cần thiết. Nếu có thể, hãy tạo ra một trang thông báo hoặc cung cấp các liên kết cụ thể cho người dùng thay vì chuyển hướng tự động.\r\n', 1),
(12, 'Path Traversal', 'Path traversal hay còn gọi là Directory traversal là một lỗ hổng bảo mật cho phép kẻ tấn công đọc các file TÙY Ý trên server. Nó dẫn đến việc bị lộ thông tin nhạy cảm của ứng dụng web như thông tin đăng nhập, một số file hoặc thư mục hệ điều hành.\r\n\r\nVì sao mình nói là TÙY Ý, bởi vì trên server sẽ có sự phân quyền và sở hữu đối với các file và folder, admin sẽ sử dụng Access Control List để quy định ai được sử dụng những file này nhằm mục đích gì (read, write, excute).', '- Các yêu cầu URL không bình thường: Kiểm tra các yêu cầu URL mà ứng dụng web nhận được. Nếu bạn thấy các yêu cầu URL có chứa các chuỗi như \"../\" hoặc \"%2e%2e%2f\" được sử dụng để di chuyển ra khỏi thư mục hiện tại, có thể là dấu hiệu của lỗ hỏng Path Traversal.\r\n\r\n- Tham số yêu cầu không bình thường: Xem xét các tham số yêu cầu (request parameters) mà ứng dụng web sử dụng. Nếu một tham số yêu cầu cho phép người dùng chỉ định đường dẫn tệp tin hoặc thư mục, hãy xem xét xem liệu người dùng có thể chèn các ký tự đặc biệt như \"..\" để truy cập các thư mục không được cho phép hay không.\r\n\r\n- Lỗi trả về không mong muốn: Nếu khi bạn thử truy cập vào một đường dẫn không hợp lệ hoặc một tệp tin không tồn tại và ứng dụng web trả về một lỗi không mong muốn, có thể là một dấu hiệu của lỗ hỏng Path Traversal. Lỗi này thường xuất hiện khi ứng dụng web không kiểm soát đầu vào người dùng và cho phép truy cập vào các tệp tin không được phép.\r\n\r\n- Các tin nhắn lỗi chứa đường dẫn hệ thống: Khi một lỗ hỏng Path Traversal xảy ra, một số ứng dụng web có thể hiển thị các tin nhắn lỗi chứa đường dẫn hệ thống hoặc các chỉ mục thư mục. Nếu bạn thấy các đường dẫn hệ thống như \"/etc/passwd\" hoặc \"C:\\Windows\\system32\" xuất hiện trong các tin nhắn lỗi, có thể là dấu hiệu của lỗ hỏng Path Traversal.\r\n\r\n- Kiểm tra bảo mật mã nguồn: Nếu bạn có quyền truy cập vào mã nguồn ứng dụng web, hãy kiểm tra các điểm chưa được kiểm tra đầu vào (input validation) hoặc hàm xử lý đường dẫn. Nếu bạn thấy rằng ứng dụng web không kiểm tra và kiểm soát đầy đủ các đầu vào của người dùng, có thể sẽ có lỗ hỏng Path Traversal.', '1 Giai đoạn đang phát triển\r\nLọc ra các kí tự đầu vào nhằm ngăn chặn người dùng sử dụng các dấu phân cách truy cập tới API hệ thống tệp.\r\nXác thực đầu vào của người dùng trước khi xử lý bằng whitelist các giá trị được phép, còn nếu không thể tránh khỏi việc phải sử dụng path truy cập thì phải xác thực được nội dung cho phép truy cập (ví dụ như các kí tự phải hoàn toàn là chữ và số)\r\nSau khi xác thực đầu vào, ứng dụng sẽ thêm đầu vào vào base directory và sử dụng API hệ thống để chuẩn hóa đường dẫn. Nó sẽ xác minh rằng đường dẫn được chuẩn hóa bắt đầu với base directory.\r\n2 Giai đoạn release\r\nBằng cách sử dụng WAF (Web Application Firewall) chúng ta sẽ có thêm 1 lớp bảo mật nữa từ giai đoạn đang phát triển.\r\n\r\nCấu hình lọc các chuỗi đầu vào từ người dùng (tránh tình trạng chấm chấm xuỵt chấm chấm v.v.v.v) ✌️', 1),
(13, 'Using component with known vulnerabilities (sử dụng thành phần có lỗ hỏng đã biết)', 'Lỗ hỏng \"Using component with known vulnerabilities\" (sử dụng thành phần có lỗ hỏng đã biết) là một vấn đề bảo mật trong phát triển phần mềm, đặc biệt là ứng dụng web. Đây là tình trạng khi một ứng dụng sử dụng một thành phần (thư viện, framework, plugin, module, hoặc phần mềm bên thứ ba khác) mà đã biết có lỗ hỏng bảo mật.', '- Cảnh báo từ công cụ quét lỗ hỏng: Các công cụ quét lỗ hỏng bảo mật như OWASP ZAP, Burp Suite, hoặc Nessus có thể cung cấp cảnh báo khi phát hiện các thành phần đã biết có lỗ hỏng bảo mật. Chúng có thể liệt kê các phiên bản cụ thể của các thành phần có lỗ hỏng và cung cấp khuyến nghị về cách khắc phục.\r\n\r\n- Công bố lỗi bảo mật của nhà cung cấp thành phần: Nhà cung cấp của thành phần (thư viện, framework, plugin, v.v.) có thể đã công bố lỗi bảo mật về phiên bản cụ thể của thành phần đó. Bạn có thể kiểm tra trang web hoặc thông báo bảo mật của nhà cung cấp để tìm hiểu về các lỗ hỏng đã biết.\r\n\r\n- Cập nhật phiên bản mới nhất: Nếu bạn không cập nhật các thành phần sử dụng trong ứng dụng web lên phiên bản mới nhất, có thể rằng phiên bản hiện tại đang sử dụng chứa các lỗ hỏng bảo mật đã biết. Theo dõi các bản vá bảo mật và cập nhật phiên bản mới nhất của các thành phần để giảm thiểu nguy cơ sử dụng các thành phần có lỗ hỏng.\r\n\r\n- Các lỗi bảo mật đã biết trong nhật ký hệ thống: Kiểm tra các nhật ký hệ thống của ứng dụng web để xem nếu có bất kỳ lỗi bảo mật đã biết nào liên quan đến các thành phần sử dụng. Các lỗi này có thể được ghi lại trong các thông báo lỗi, ghi chú của nhà phát triển hoặc hệ thống, hoặc thông qua các tệp nhật ký khác.\r\n\r\n- Theo dõi các thông báo bảo mật: Quan tâm đến các thông báo bảo mật được công bố bởi cộng đồng bảo mật, như OWASP, CERT, hoặc các nhóm bảo mật khác. Các thông báo này thường đề cập đến các lỗ hỏng bảo mật trong các thành phần phổ biến và cung cấp thông tin về cách phát hiện và khắc phục chúng.', '- Cập nhật thường xuyên: Đảm bảo rằng bạn cập nhật các thành phần sử dụng trong ứng dụng web lên phiên bản mới nhất. Điều này bao gồm việc theo dõi các bản vá bảo mật từ nhà cung cấp và áp dụng chúng cho các thành phần tương ứng. Đừng quên kiểm tra tính tương thích của các bản vá với ứng dụng của bạn trước khi cập nhật.\r\n\r\n- Quản lý thành phần: Sử dụng công cụ quản lý gói hoặc công cụ quản lý thành phần để theo dõi các thành phần sử dụng trong ứng dụng web. Các công cụ này giúp bạn quản lý phiên bản, theo dõi các lỗ hỏng bảo mật đã biết và cung cấp thông báo khi có phiên bản mới của các thành phần.\r\n\r\n- Kiểm tra tính toàn vẹn và lỗ hỏng bảo mật: Sử dụng các công cụ quét lỗ hỏng bảo mật để kiểm tra tính toàn vẹn và lỗ hỏng bảo mật của các thành phần sử dụng trong ứng dụng web. Các công cụ này có thể phát hiện các lỗ hỏng đã biết và cung cấp báo cáo chi tiết để bạn có thể khắc phục chúng.\r\n\r\n- Đánh giá các thành phần thứ ba: Trước khi sử dụng các thành phần thứ ba, hãy đánh giá tính an toàn và đáng tin cậy của chúng. Kiểm tra xem nhà cung cấp đã công bố lỗi bảo mật và phản ứng nhanh chóng khi có lỗ hỏng mới. Đồng thời, tìm hiểu về độ phổ biến và sự hỗ trợ từ cộng đồng để đảm bảo rằng bạn đang sử dụng các thành phần tin cậy.\r\n\r\n- Giảm sự phụ thuộc chéo: Đối với các thành phần sử dụng trong ứng dụng web, giảm sự phụ thuộc chéo giữa chúng. Nếu một thành phần có lỗ hỏng bảo mật, sự phụ thuộc chéo có thể lan rộng vấn đề đến các thành phần khác. Tìm hiểu và quản lý các phụ thuộc chéo để giảm thiểu nguy cơ.\r\n\r\n- Hạn chế sử dụng thành phần không cần thiết: Xác định và loại bỏ các thành phần không cần thiết khỏi ứng dụng web. Mỗi thành phần có thể tạo ra một tiềm năng lỗ hỏng bảo mật. Bằng cách giảm số lượng thành phần, bạn giảm thiểu khả năng sử dụng các thành phần có lỗ hỏng.\r\n\r\n- Theo dõi thông báo bảo mật: Theo dõi thông báo bảo mật từ các nhóm bảo mật và nhà cung cấp thành phần để cập nhật với các lỗ hỏng bảo mật mới nhất và khắc phục chúng.', 1);

--
-- Chỉ mục cho các bảng đã đổ
--

--
-- Chỉ mục cho bảng `tbl_danhmuc`
--
ALTER TABLE `tbl_danhmuc`
  ADD PRIMARY KEY (`id_danhMuc`);

--
-- Chỉ mục cho bảng `tbl_noidung`
--
ALTER TABLE `tbl_noidung`
  ADD PRIMARY KEY (`id_noiDung`);

--
-- AUTO_INCREMENT cho các bảng đã đổ
--

--
-- AUTO_INCREMENT cho bảng `tbl_danhmuc`
--
ALTER TABLE `tbl_danhmuc`
  MODIFY `id_danhMuc` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT cho bảng `tbl_noidung`
--
ALTER TABLE `tbl_noidung`
  MODIFY `id_noiDung` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
